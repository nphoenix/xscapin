<script type="text/javascript">
        var gk_isXlsx = false;
        var gk_xlsxFileLookup = {};
        var gk_fileData = {};
        function filledCell(cell) {
          return cell !== '' && cell != null;
        }
        function loadFileData(filename) {
        if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
            try {
                var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];

                // Convert sheet to JSON to filter blank rows
                var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
                // Filter out blank rows (rows where all cells are empty, null, or undefined)
                var filteredData = jsonData.filter(row => row.some(filledCell));

                // Heuristic to find the header row by ignoring rows with fewer filled cells than the next row
                var headerRowIndex = filteredData.findIndex((row, index) =>
                  row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
                );
                // Fallback
                if (headerRowIndex === -1 || headerRowIndex > 25) {
                  headerRowIndex = 0;
                }

                // Convert filtered JSON back to CSV
                var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex)); // Create a new sheet from filtered array of arrays
                csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
                return csv;
            } catch (e) {
                console.error(e);
                return "";
            }
        }
        return gk_fileData[filename] || "";
        }
        </script><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mush to Nome: Hello World Edition with xAPI</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: url('https://via.placeholder.com/800x600?text=Snowy+Alaska') no-repeat center center fixed;
            background-size: cover;
            color: #333;
            text-align: center;
            padding: 20px;
        }
        .game-container {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            padding: 20px;
            max-width: 600px;
            margin: 0 auto;
        }
        button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            margin: 5px;
            cursor: pointer;
            border-radius: 5px;
        }
        button:hover {
            background: #45a049;
        }
        .question {
            margin: 20px 0;
        }
        .feedback {
            color: #ff4444;
            font-weight: bold;
        }
        .progress {
            font-size: 18px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>Mush to Nome: Hello World Edition</h1>
        <div id="level-display">Level 1: Puppy Training Grounds</div>
        <div id="question-display" class="question"></div>
        <div id="options"></div>
        <div id="feedback" class="feedback"></div>
        <div id="progress" class="progress"></div>
    </div>

    <script>
        const levels = [
            {
                name: "Puppy Training Grounds",
                questions: [
                    {
                        id: "level1-q1",
                        text: "What command tells your dogs to start running?",
                        options: ["Whoa", "Mush", "Gee", "Haw"],
                        correct: "Mush",
                        hint: "It's the word mushers shout to get the team moving!"
                    },
                    {
                        id: "level1-q2",
                        text: "How many calories can an Iditarod dog eat daily?",
                        options: ["1,000", "5,000", "10,000", "20,000"],
                        correct: "10,000",
                        hint: "These dogs need tons of energy for the cold trails!"
                    },
                    {
                        id: "level1-q3",
                        text: "What protects a dog's paws on icy trails?",
                        options: ["Gloves", "Booties", "Socks", "Bandages"],
                        correct: "Booties",
                        hint: "Think of tiny shoes for dog paws!"
                    }
                ]
            },
            {
                name: "Gear Up and Trail Practice",
                questions: [
                    {
                        id: "level2-q1",
                        text: "What must you carry to melt snow for water?",
                        options: ["Kettle", "Cooker", "Pan", "Heater"],
                        correct: "Cooker",
                        hint: "You need this to make food and water on the trail!"
                    },
                    {
                        id: "level2-q2",
                        text: "What is the minimum number of dogs to finish the race?",
                        options: ["4", "6", "8", "10"],
                        correct: "6",
                        hint: "The Iditarod has a strict rule for team size at the end!"
                    },
                    {
                        id: "level2-q3",
                        text: "What tool helps break trail if you're stuck?",
                        options: ["Shovel", "Axe", "Snowshoes", "Hammer"],
                        correct: "Snowshoes",
                        hint: "You wear these to walk on deep snow!"
                    }
                ]
            },
            {
                name: "Endurance Trials",
                questions: [
                    {
                        id: "level3-q1",
                        text: "How long is the mandatory layover in the Iditarod?",
                        options: ["8 hours", "12 hours", "24 hours", "36 hours"],
                        correct: "24 hours",
                        hint: "It's a full day of rest for the dogs!"
                    },
                    {
                        id: "level3-q2",
                        text: "Where must you take an 8-hour rest?",
                        options: ["Anchorage", "White Mountain", "Start Line", "Nome"],
                        correct: "White Mountain",
                        hint: "It's near the end, before the final sprint!"
                    },
                    {
                        id: "level3-q3",
                        text: "What do you do if you pass another team?",
                        options: ["Wave", "Wait 15 minutes", "Speed up", "Share food"],
                        correct: "Wait 15 minutes",
                        hint: "The passed team gets a short break before chasing!"
                    }
                ]
            }
        ];

        let currentLevel = 0;
        let currentQuestion = 0;
        let correctAnswers = 0;

        async function sendXAPIStatement(selected, correct, level, question) {
            const statement = {
                actor: {
                    mbox: "mailto:dummyone@demo.com",
                    name: "Dummy User"
                },
                verb: {
                    id: "http://adlnet.gov/expapi/verbs/answered",
                    display: { "en-US": "answered" }
                },
                object: {
                    id: `http://example.com/mush-to-nome/question/${question.id}`,
                    definition: {
                        name: { "en-US": question.text },
                        type: "http://adlnet.gov/expapi/activities/question"
                    }
                },
                result: {
                    success: selected === correct,
                    response: selected
                },
                context: {
                    contextActivities: {
                        parent: [{
                            id: `http://example.com/mush-to-nome/level/${currentLevel + 1}`,
                            definition: {
                                name: { "en-US": levels[currentLevel].name }
                            }
                        }]
                    }
                },
                timestamp: new Date().toISOString()
            };

            try {
                const response = await fetch("https://watershedlrs.com/api/organizations/14622/lrs/statements", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": "Basic " + btoa("afb7bf84a38728:31bcf2a311a752"),
                        "X-Experience-API-Version": "1.0.3"
                    },
                    body: JSON.stringify(statement)
                });
                if (!response.ok) {
                    console.error("xAPI statement failed:", response.statusText);
                }
            } catch (error) {
                console.error("xAPI error:", error);
            }
        }

        function displayQuestion() {
            const level = levels[currentLevel];
            const question = level.questions[currentQuestion];
            document.getElementById('level-display').innerText = `Level ${currentLevel + 1}: ${level.name}`;
            document.getElementById('question-display').innerText = question.text;
            const optionsDiv = document.getElementById('options');
            optionsDiv.innerHTML = '';
            question.options.forEach(option => {
                const button = document.createElement('button');
                button.innerText = option;
                button.onclick = () => checkAnswer(option, question.correct, question.hint, question);
                optionsDiv.appendChild(button);
            });
            document.getElementById('feedback').innerText = '';
            document.getElementById('progress').innerText = `Question ${currentQuestion + 1} of 3 | Correct: ${correctAnswers}`;
        }

        function checkAnswer(selected, correct, hint, question) {
            // Send xAPI statement for this answer attempt
            sendXAPIStatement(selected, correct, currentLevel, question);

            if (selected === correct) {
                correctAnswers++;
                currentQuestion++;
                if (currentQuestion >= 3) {
                    if (correctAnswers === 3) {
                        currentLevel++;
                        currentQuestion = 0;
                        correctAnswers = 0;
                        if (currentLevel >= levels.length) {
                            document.getElementById('question-display').innerText = "Congrats! You're ready for Race Day!";
                            document.getElementById('options').innerHTML = '';
                            document.getElementById('feedback').innerText = "You've mastered the Iditarod basics! Mush to Nome!";
                            document.getElementById('progress').innerText = '';
                            // Send a completion statement
                            sendXAPIStatement("completed", "completed", currentLevel, {
                                id: "game-completion",
                                text: "Completed Mush to Nome game"
                            });
                            return;
                        }
                    } else {
                        document.getElementById('feedback').innerText = "You need all 3 correct! Try this level again.";
                        currentQuestion = 0;
                        correctAnswers = 0;
                    }
                }
                displayQuestion();
            } else {
                document.getElementById('feedback').innerText = `Wrong! Hint: ${hint} Try again.`;
            }
        }

        displayQuestion();
    </script>
</body>
</html>
